{
  "messages": [
    {
      "subject": "Regarding your website",
      "email": "user@example.com",
      "content": "I have a question about your website.",
      "id": 1
    },
    {
      "subject": "Review Canceled",
      "email": "fdfd@outlook",
      "content": "e4rerer",
      "id": 2
    },
    {
      "subject": "qdwfwfeweefw",
      "email": "fuad0fataliyev0@outlook.com",
      "content": "erfefewgrrw",
      "id": 3
    }
  ],
  "flashcards": [
    {
      "question": "How do you create a Promise in JavaScript?",
      "answer": "You can create a Promise using the 'Promise' constructor, passing it a function with 'resolve' and 'reject' parameters.",
      "lastModified": "2024-01-03T16:48:15.951Z",
      "status": "Want to Learn",
      "id": 6,
      "order": 4
    },
    {
      "question": "What are the three states of a Promise in JavaScript?",
      "answer": "A Promise can be in one of three states: pending, fulfilled, or rejected.",
      "lastModified": "2024-01-03T16:49:02.951Z",
      "status": "Want to Learn",
      "id": 7,
      "order": 5
    },
    {
      "question": "How do you handle a fulfilled Promise in JavaScript?",
      "answer": "You can handle a fulfilled Promise using the 'then' method, which takes a callback function as an argument.",
      "lastModified": "2024-01-03T16:50:08.951Z",
      "status": "Want to Learn",
      "id": 8,
      "order": 6
    },
    {
      "question": "What is Promise chaining in JavaScript?",
      "answer": "Promise chaining is a technique where you can chain multiple 'then' and 'catch' handlers to a Promise, making it easier to work with asynchronous operations sequentially.",
      "lastModified": "2024-01-03T16:51:20.951Z",
      "status": "Want to Learn",
      "id": 9,
      "order": 7
    },
    {
      "question": "What is the purpose of the 'catch' method in JavaScript Promises?",
      "answer": "The 'catch' method is used to handle errors or rejections in Promises, providing a way to gracefully handle exceptions in asynchronous code.",
      "lastModified": "2024-01-03T16:52:35.951Z",
      "status": "Want to Learn",
      "id": 10,
      "order": 8
    },
    {
      "question": "How do you create a Promise that immediately resolves with a value?",
      "answer": "You can create a Promise that immediately resolves with a value using the 'Promise.resolve()' method.",
      "lastModified": "2024-01-03T16:53:50.951Z",
      "status": "Want to Learn",
      "id": 11,
      "order": 9
    },
    {
      "question": "What is the purpose of the 'Promise.all()' method in JavaScript?",
      "answer": "The 'Promise.all()' method is used to wait for all the Promises in an iterable to resolve and returns a new Promise that resolves to an array of the resolved values.",
      "lastModified": "2024-01-03T16:55:03.951Z",
      "status": "Want to Learn",
      "id": 12,
      "order": 10
    },
    {
      "question": "What is the difference between Promises and callbacks in JavaScript?",
      "answer": "Promises provide a more structured and cleaner way to handle asynchronous operations compared to callbacks, which can lead to callback hell or pyramid of doom.",
      "lastModified": "2024-01-03T16:56:17.951Z",
      "status": "Want to Learn",
      "id": 13,
      "order": 11
    },
    {
      "question": "Can a Promise be both fulfilled and rejected?",
      "answer": "No, a Promise can only be either fulfilled or rejected, not both. Once it is fulfilled or rejected, its state is immutable.",
      "lastModified": "2024-01-03T16:57:28.951Z",
      "status": "Want to Learn",
      "id": 14,
      "order": 12
    },
    {
      "question": "What is the purpose of the 'Promise.race()' method in JavaScript?",
      "answer": "The 'Promise.race()' method is used to wait for the first Promise in an iterable to either fulfill or reject, and it returns a new Promise that mirrors the state of the first settled Promise.",
      "lastModified": "2024-01-03T16:58:41.951Z",
      "status": "Want to Learn",
      "id": 15,
      "order": 13
    },
    {
      "question": "What is the 'async/await' syntax in JavaScript, and how does it relate to Promises?",
      "answer": "'async/await' is a syntactical feature in JavaScript that allows you to write asynchronous code in a more synchronous-like manner. It is built on top of Promises and provides a more readable way to work with asynchronous operations.",
      "lastModified": "2024-01-03T16:59:55.951Z",
      "status": "Want to Learn",
      "id": 16,
      "order": 14
    },
    {
      "question": "How can you handle errors in 'async/await' code in JavaScript?",
      "answer": "You can use 'try/catch' blocks to handle errors in 'async/await' code, similar to how you handle exceptions in synchronous code.",
      "lastModified": "2024-01-03T17:01:07.951Z",
      "status": "Want to Learn",
      "id": 17,
      "order": 15
    },
    {
      "question": "What is the purpose of the 'finally' block in 'async/await' code?",
      "answer": "The 'finally' block in 'async/await' code is used to specify code that should be executed regardless of whether the 'try' block succeeded or the 'catch' block was entered.",
      "lastModified": "2024-01-03T17:02:20.951Z",
      "status": "Want to Learn",
      "id": 18,
      "order": 16
    },
    {
      "question": "How can you convert a callback-based function to return a Promise in JavaScript?",
      "answer": "You can use the 'util.promisify' method in Node.js or manually create a Promise and resolve or reject it based on the callback function's result.",
      "lastModified": "2024-01-03T17:03:34.951Z",
      "status": "Want to Learn",
      "id": 19,
      "order": 17
    },
    {
      "question": "What is the difference between 'Promise.resolve()' and 'Promise.reject()' in JavaScript?",
      "answer": "'Promise.resolve()' creates a Promise that is immediately resolved with a given value, while 'Promise.reject()' creates a Promise that is immediately rejected with a given reason.",
      "lastModified": "2024-01-03T17:04:48.951Z",
      "status": "Want to Learn",
      "id": 20,
      "order": 18
    },
    {
      "question": "Can you nest Promises inside 'then' or 'catch' handlers in JavaScript?",
      "answer": "Yes, you can nest Promises inside 'then' or 'catch' handlers to perform sequential asynchronous operations.",
      "lastModified": "2024-01-03T17:06:01.951Z",
      "status": "Want to Learn",
      "id": 21,
      "order": 19
    },
    {
      "question": "What is Promise rejection handling in JavaScript?",
      "answer": "Promise rejection handling involves using the 'catch' method or 'try/catch' blocks to handle errors and exceptions that occur during the execution of Promises.",
      "lastModified": "2024-01-03T17:07:13.951Z",
      "status": "Want to Learn",
      "id": 22,
      "order": 20
    },
    {
      "question": "How can you chain multiple Promises using 'async/await' in JavaScript?",
      "answer": "You can use the 'await' keyword in an 'async' function to sequentially await the resolution of Promises, effectively chaining them.",
      "lastModified": "2024-01-03T17:08:26.951Z",
      "status": "Want to Learn",
      "id": 23,
      "order": 21
    },
    {
      "question": "What are some common use cases for Promises in JavaScript?",
      "answer": "Promises are commonly used for asynchronous tasks like making network requests, reading files, and handling timeouts in a more structured and manageable way.",
      "lastModified": "2024-01-03T17:09:38.951Z",
      "status": "Want to Learn",
      "id": 24,
      "order": 22
    },
    {
      "question": "What happens if you don't handle errors in a Promise in JavaScript?",
      "answer": "If you don't handle errors in a Promise using 'catch' or 'try/catch', unhandled exceptions may lead to unexpected behavior and can crash your application.",
      "lastModified": "2024-01-03T17:10:50.951Z",
      "status": "Want to Learn",
      "id": 25,
      "order": 23
    },
    {
      "question": "What is the purpose of the 'Promise.prototype.finally()' method in JavaScript?",
      "answer": "The 'Promise.prototype.finally()' method is used to specify a callback function that is executed when a Promise is settled, whether it is fulfilled or rejected. It allows you to perform cleanup tasks.",
      "lastModified": "2024-01-03T17:12:03.951Z",
      "status": "Want to Learn",
      "id": 26,
      "order": 24
    },
    {
      "question": "How do you handle multiple Promises concurrently in JavaScript?",
      "answer": "You can use tools like 'Promise.all()' or 'Promise.race()' to handle multiple Promises concurrently, depending on your use case.",
      "lastModified": "2024-01-03T17:13:16.951Z",
      "status": "Want to Learn",
      "id": 27,
      "order": 25
    },
    {
      "question": "What is java?",
      "answer": "IDK",
      "lastModified": "2024-01-04T06:04:55.419Z",
      "status": "Noted",
      "id": 28
    },
    {
      "question": "Do you know How you will solve global problems?",
      "answer": "No",
      "lastModified": "2024-01-04T06:05:41.098Z",
      "status": "Noted",
      "id": 29
    },
    {
      "question": "What is the purpose of the 'Promise.all()' method in JavaScript?",
      "answer": "The 'Promise.all()' method is used to wait for all the Promises in an iterable to resolve and returns a new Promise that resolves to an array of the resolved values.",
      "lastModified": "2024-01-04T06:07:07.767Z",
      "status": "Noted",
      "id": 30
    }
  ]
}